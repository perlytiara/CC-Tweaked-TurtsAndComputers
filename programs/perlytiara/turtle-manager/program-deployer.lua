-- Program Deployer for Turtle Management
-- This script helps deploy programs from VS Code to turtles

local function printBanner()
    term.clear()
    term.setCursorPos(1, 1)
    print("========================================")
    print("      TURTLE PROGRAM DEPLOYER")
    print("========================================")
    print()
end

local function createProgramFromTemplate()
    print("Create New Program Template")
    print("===========================")
    print()
    
    write("Program name (without .lua): ")
    local name = read()
    
    if not name or name == "" then
        print("Invalid name!")
        return
    end
    
    local filename = name .. ".lua"
    
    if fs.exists(filename) then
        print("Program already exists! Overwrite? (y/n): ")
        local confirm = read()
        if confirm:lower() ~= "y" then
            print("Cancelled.")
            return
        end
    end
    
    -- Create a basic turtle program template
    local template = [[-- ]] .. name:upper() .. " PROGRAM
-- Generated by Turtle Program Deployer
-- Edit this file in VS Code and sync to turtle

local function printBanner()
    term.clear()
    term.setCursorPos(1, 1)
    print("========================================")
    print("    ]] .. name:upper() .. [[ PROGRAM")
    print("========================================")
    print()
end

local function main()
    printBanner()
    
    -- Your program logic goes here
    print("Hello from ]] .. name .. [[!")
    print("This is a template program.")
    print("Edit this file in VS Code to add your logic.")
    
    -- Example: Basic turtle movement
    -- turtle.forward()
    -- turtle.dig()
    -- turtle.turnRight()
    
    print()
    print("Program completed.")
end

-- Run the program
main()
]]
    
    local file = fs.open(filename, "w")
    if file then
        file.write(template)
        file.close()
        print("Created: " .. filename)
        print("You can now edit this file in VS Code.")
    else
        print("Failed to create file!")
    end
end

local function installProgram()
    print("Install Program from Repository")
    print("===============================")
    print()
    print("Available programs from your collection:")
    print()
    
    -- List available programs from the workspace
    local programs = {
        "tClear - Area clearing utility",
        "quarry - Mining quarry",
        "harvest - Harvesting automation", 
        "bamboo - Bamboo farm",
        "dome_tunnels - Dome-shaped tunnel miner",
        "epic_mining - Advanced mining turtle"
    }
    
    for i, program in ipairs(programs) do
        print(i .. ". " .. program)
    end
    
    print()
    write("Select program to install (1-" .. #programs .. "): ")
    local choice = tonumber(read())
    
    if choice and choice >= 1 and choice <= #programs then
        local selected = programs[choice]
        print("Selected: " .. selected)
        print()
        print("To install this program:")
        print("1. Copy the program file from VS Code workspace")
        print("2. Paste it into this turtle's programs directory")
        print("3. The program will be available to run")
        print()
        print("Program files are located in your VS Code workspace at:")
        print("programs/[author]/[program-name].lua")
    else
        print("Invalid selection!")
    end
end

local function showInstalledPrograms()
    print("Installed Programs")
    print("==================")
    print()
    
    if not fs.exists("programs") then
        print("No programs directory found.")
        return
    end
    
    local programs = fs.list("programs")
    if #programs == 0 then
        print("No programs installed.")
        return
    end
    
    for _, program in ipairs(programs) do
        local path = "programs/" .. program
        if not fs.isDir(path) and program:sub(-4) == ".lua" then
            local size = 0
            local file = fs.open(path, "r")
            if file then
                local content = file.readAll()
                size = #content
                file.close()
            end
            
            print("ðŸ“„ " .. program .. " (" .. size .. " bytes)")
        end
    end
    
    print()
    print("To run a program, type: programs/[filename]")
end

local function main()
    printBanner()
    
    while true do
        print("Available operations:")
        print("1. Create new program template")
        print("2. Install program from repository")
        print("3. Show installed programs")
        print("4. Exit")
        print()
        
        write("Select option (1-4): ")
        local choice = read()
        
        if choice == "1" then
            createProgramFromTemplate()
        elseif choice == "2" then
            installProgram()
        elseif choice == "3" then
            showInstalledPrograms()
        elseif choice == "4" then
            print("Goodbye!")
            break
        else
            print("Invalid option. Please try again.")
        end
        
        print()
        print("Press any key to continue...")
        os.pullEvent("key")
        printBanner()
    end
end

-- Run the main function
main()
